--// Variables
print("hey")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}
print("hey")

local bones = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "LowerTorso"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"}
}
print("hey")

--// Settings
local ESP_SETTINGS = {
    BoxOutlineColor = Color3.new(0, 0, 0),
    BoxColor = Color3.new(1, 1, 1),
    NameColor = Color3.new(1, 1, 1),
    HealthOutlineColor = Color3.new(0, 0, 0),
    HealthHighColor = Color3.new(0, 1, 0),
    HealthLowColor = Color3.new(1, 0, 0),
    CharSize = Vector2.new(4, 6),
    Teamcheck = false,
    WallCheck = false,
    Enabled = false,
    ShowBox = false,
    BoxType = "2D",
    ShowName = false,
    ShowHealth = false,
    ShowDistance = false,
    ShowSkeletons = false,
    ShowTracer = false,
    TracerColor = Color3.fromRGB(98,105,188), 
    TracerThickness = 2,
    SkeletonsColor = Color3.new(1, 1, 1),
    TracerPosition = "Bottom",
}
print("hey")

local function create(class, properties)
    local success, drawing = pcall(function()
        local drawing = Drawing.new(class)
        for property, value in pairs(properties) do
            drawing[property] = value
        end
        return drawing
    end)
    if success then
        return drawing
    else
        warn("Failed to create " .. class .. ": " .. tostring(drawing))
        return nil
    end
end
print("hey")

local function createEsp(player)
    local success, err = pcall(function()
        local esp = {
            tracer = create("Line", {
                Thickness = ESP_SETTINGS.TracerThickness,
                Color = ESP_SETTINGS.TracerColor,
                Transparency = 0.5
            }),
            boxOutline = create("Square", {
                Color = ESP_SETTINGS.BoxOutlineColor,
                Thickness = 3,
                Filled = false
            }),
            box = create("Square", {
                Color = ESP_SETTINGS.BoxColor,
                Thickness = 1,
                Filled = false
            }),
            name = create("Text", {
                Color = ESP_SETTINGS.NameColor,
                Outline = true,
                Center = true,
                Size = 12,  
                Font = Drawing.Fonts.Arcade
            }),
            healthOutline = create("Line", {
                Thickness = 3,  
                Color = ESP_SETTINGS.HealthOutlineColor
            }),
            health = create("Line", {
                Thickness = 2  
            }),
            distance = create("Text", {
                Color = Color3.new(1, 1, 1),
                Size = 8,  
                Outline = true,
                Center = true,
                Font = Drawing.Fonts.Arcade
            }),
            boxLines = {},
        }

        cache[player] = esp
        cache[player]["skeletonlines"] = {}
    end)

    if not success then
        warn("Failed to create ESP for player: " .. tostring(player.Name) .. " | Error: " .. tostring(err))
    end
end
print("hey")

local function isPlayerBehindWall(player)
    local success, result = pcall(function()
        local character = player.Character
        if not character then
            return false
        end

        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart then
            return false
        end

        local ray = Ray.new(camera.CFrame.Position, (rootPart.Position - camera.CFrame.Position).Unit * (rootPart.Position - camera.CFrame.Position).Magnitude)
        local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character, character})

        return hit and hit:IsA("Part")
    end)
    
    if success then
        return result
    else
        warn("Failed to check if player is behind a wall: " .. tostring(result))
        return false
    end
end

local function removeEsp(player)
    pcall(function()
        local esp = cache[player]
        if not esp then return end

        for _, drawing in pairs(esp) do
            drawing:Remove()
        end

        cache[player] = nil
    end)
end
print("hey")

local function updateEsp()
    pcall(function()
        for player, esp in pairs(cache) do
            local character, team = player.Character, player.Team
            if character and (not ESP_SETTINGS.Teamcheck or (team and team ~= localPlayer.Team)) then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                local head = character:FindFirstChild("Head")
                local humanoid = character:FindFirstChild("Dinosaur")
                local isBehindWall = ESP_SETTINGS.WallCheck and isPlayerBehindWall(player)
                local shouldShow = not isBehindWall and ESP_SETTINGS.Enabled
                if rootPart and head and humanoid and shouldShow then
                    local position, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                    if onScreen then
                        -- Update ESP elements here (Box, Name, Health, etc.)
                        pcall(function() 
                            -- Your individual ESP updates inside here, for example:
                            if ESP_SETTINGS.ShowBox and ESP_SETTINGS.Enabled then
                                -- Update box-related ESP
                            end
                            if ESP_SETTINGS.ShowSkeletons and ESP_SETTINGS.Enabled then
                                -- Update skeleton-related ESP
                            end
                        end)
                    end
                else
                    -- Hide ESP if not visible or player is not in view
                    for _, drawing in pairs(esp) do
                        drawing.Visible = false
                    end
                end
            else
                for _, drawing in pairs(esp) do
                    drawing.Visible = false
                end
            end
        end
    end)
end
print("hey")

local camera = workspace.CurrentCamera or workspace:WaitForChild("CurrentCamera")

-- Player-related event handling
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        pcall(function()
            createEsp(player)
        end)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= localPlayer then
        pcall(function()
            createEsp(player)
        end)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    pcall(function()
        removeEsp(player)
    end)
end)

RunService.RenderStepped:Connect(function()
    if camera == nil or not camera:IsA("Camera") then
        camera = workspace:FindFirstChildOfClass("Camera")
    end
    if camera then
        pcall(updateEsp)
    end
end)


return ESP_SETTINGS
