local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}

local bones = {
    {"Head", "UpperTorso"}, {"UpperTorso", "RightUpperArm"}, {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"}, {"UpperTorso", "LeftUpperArm"}, {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"}, {"UpperTorso", "LowerTorso"}, {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"}, {"LeftLowerLeg", "LeftFoot"}, {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"}, {"RightLowerLeg", "RightFoot"}
}

local ESP_SETTINGS = {
    BoxOutlineColor = Color3.new(0, 0, 0), BoxColor = Color3.new(1, 1, 1), NameColor = Color3.new(1, 1, 1),
    HealthOutlineColor = Color3.new(0, 0, 0), HealthHighColor = Color3.new(0, 1, 0), HealthLowColor = Color3.new(1, 0, 0),
    CharSize = Vector2.new(4, 6), Teamcheck = false, WallCheck = false, Enabled = false,
    ShowBox = false, BoxType = "2D", ShowName = false, ShowHealth = false, ShowDistance = false,
    ShowSkeletons = false, ShowTracer = false, TracerColor = Color3.fromRGB(98, 105, 188),
    TracerThickness = 2, SkeletonsColor = Color3.new(1, 1, 1), TracerPosition = "Bottom"
}

local function create(class, properties)
    local drawing = Drawing.new(class)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

local function clearEsp(esp)
    for _, drawing in pairs(esp) do
        if drawing.Remove then drawing:Remove() end
    end
end

local function createEsp(player)
    cache[player] = {
        tracer = create("Line", {Thickness = ESP_SETTINGS.TracerThickness, Color = ESP_SETTINGS.TracerColor, Transparency = 0.5}),
        boxOutline = create("Square", {Color = ESP_SETTINGS.BoxOutlineColor, Thickness = 3, Filled = false}),
        box = create("Square", {Color = ESP_SETTINGS.BoxColor, Thickness = 1, Filled = false}),
        name = create("Text", {Color = ESP_SETTINGS.NameColor, Outline = true, Center = true, Size = 13, Font = Drawing.Fonts.Arcade}),
        healthOutline = create("Line", {Thickness = 3, Color = ESP_SETTINGS.HealthOutlineColor}),
        health = create("Line", {Thickness = 2}),
        distance = create("Text", {Color = Color3.new(1, 1, 1), Size = 13, Outline = true, Center = true, Font = Drawing.Fonts.Arcade}),
        boxLines = {}, skeletonlines = {}
    }
end

local function isPlayerBehindWall(player)
    local character = player.Character
    if not character then return false end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return false end
    local ray = Ray.new(camera.CFrame.Position, (rootPart.Position - camera.CFrame.Position).Unit * (rootPart.Position - camera.CFrame.Position).Magnitude)
    local hit = workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character, character})
    return hit and hit:IsA("Part")
end

local function removeEsp(player)
    local esp = cache[player]
    if esp then clearEsp(esp) end
    cache[player] = nil
end

local function updateEsp()
    for player, esp in pairs(cache) do
        local character = player.Character
        if character and (not ESP_SETTINGS.Teamcheck or player.Team ~= localPlayer.Team) then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local head = character:FindFirstChild("Head")
            local humanoid = character:FindFirstChild("Humanoid")
            local isBehindWall = ESP_SETTINGS.WallCheck and isPlayerBehindWall(player)
            local shouldShow = not isBehindWall and ESP_SETTINGS.Enabled
            if rootPart and head and humanoid and shouldShow then
                local position, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    local hrp2D = camera:WorldToViewportPoint(rootPart.Position)
                    local charSize = (camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2.6, 0)).Y) / 2
                    local boxSize = Vector2.new(math.floor(charSize * 1.8), math.floor(charSize * 1.9))
                    local boxPosition = Vector2.new(math.floor(hrp2D.X - charSize * 1.8 / 2), math.floor(hrp2D.Y - charSize * 1.6 / 2))

                    esp.name.Visible = ESP_SETTINGS.ShowName
                    esp.name.Text = player.Name:lower()
                    esp.name.Position = Vector2.new(boxSize.X / 2 + boxPosition.X, boxPosition.Y - 16)
                    esp.name.Color = ESP_SETTINGS.NameColor

                    esp.box.Visible = ESP_SETTINGS.ShowBox and ESP_SETTINGS.BoxType == "2D"
                    esp.boxOutline.Visible = esp.box.Visible
                    esp.box.Size = boxSize
                    esp.box.Position = boxPosition

                    local healthPercentage = humanoid.Health / humanoid.MaxHealth
                    esp.healthOutline.Visible = ESP_SETTINGS.ShowHealth
                    esp.healthOutline.From = Vector2.new(boxPosition.X - 6, boxPosition.Y + boxSize.Y)
                    esp.healthOutline.To = Vector2.new(boxPosition.X - 6, boxPosition.Y)
                    esp.health.Visible = ESP_SETTINGS.ShowHealth
                    esp.health.From = Vector2.new(boxPosition.X - 5, boxPosition.Y + boxSize.Y)
                    esp.health.To = Vector2.new(boxPosition.X - 5, boxPosition.Y + boxSize.Y - healthPercentage * boxSize.Y)
                    esp.health.Color = ESP_SETTINGS.HealthLowColor:Lerp(ESP_SETTINGS.HealthHighColor, healthPercentage)

                    esp.distance.Visible = ESP_SETTINGS.ShowDistance
                    esp.distance.Text = string.format("%.1f studs", (camera.CFrame.p - rootPart.Position).Magnitude)
                    esp.distance.Position = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y + boxSize.Y + 5)

                    if ESP_SETTINGS.ShowSkeletons then
                        for i, bone in ipairs(bones) do
                            local parentBone, childBone = character:FindFirstChild(bone[1]), character:FindFirstChild(bone[2])
                            if parentBone and childBone then
                                local skeletonLine = esp.skeletonlines[i] or create("Line", {Thickness = 1, Color = ESP_SETTINGS.SkeletonsColor, Transparency = 1})
                                skeletonLine.From = Vector2.new(camera:WorldToViewportPoint(parentBone.Position).X, camera:WorldToViewportPoint(parentBone.Position).Y)
                                skeletonLine.To = Vector2.new(camera:WorldToViewportPoint(childBone.Position).X, camera:WorldToViewportPoint(childBone.Position).Y)
                                skeletonLine.Visible = true
                                esp.skeletonlines[i] = skeletonLine
                            end
                        end
                    else
                        for _, line in ipairs(esp.skeletonlines) do if line.Remove then line:Remove() end end
                        esp.skeletonlines = {}
                    end

                    local tracerY = ESP_SETTINGS.TracerPosition == "Top" and 0 or (ESP_SETTINGS.TracerPosition == "Middle" and camera.ViewportSize.Y / 2 or camera.ViewportSize.Y)
                    esp.tracer.Visible = ESP_SETTINGS.ShowTracer and not (ESP_SETTINGS.Teamcheck and player.Team == localPlayer.Team)
                    esp.tracer.From = Vector2.new(camera.ViewportSize.X / 2, tracerY)
                    esp.tracer.To = Vector2.new(hrp2D.X, hrp2D.Y)
                else
                    clearEsp(esp)
                end
            else
                clearEsp(esp)
            end
        else
            clearEsp(esp)
        end
    end
end

for _, player in ipairs(Players:GetPlayers()) do if player ~= localPlayer then createEsp(player) end end
Players.PlayerAdded:Connect(function(player) if player ~= localPlayer then createEsp(player) end end)
Players.PlayerRemoving:Connect(removeEsp)
RunService.RenderStepped:Connect(updateEsp)
return ESP_SETTINGS
