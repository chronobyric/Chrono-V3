--Settings--
local ESP = {
    Enabled = false,
    Boxes = true,
    BoxShift = CFrame.new(0,-1.5,0),
    BoxSize = Vector3.new(4,6,0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    Names = true,
    TeamColor = true,
    Thickness = 2,
    AttachShift = 1,
    TeamMates = true,
    Players = true,
    HealthBars = true,  -- New: Enable health bars

    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {}
}

--Functions--
-- Existing functions...

-- New: Function to calculate health bar size
local function CalculateHealthBarSize(humanoid)
    local maxHealth = humanoid.MaxHealth
    local currentHealth = humanoid.Health

    local sizeX = ESP.BoxSize.X
    local sizeY = ESP.BoxSize.Y * (currentHealth / maxHealth)

    return Vector3.new(sizeX, sizeY, ESP.BoxSize.Z)
end

-- New: Function to update health bar
local function UpdateHealthBar(box, humanoid)
    if not box.PrimaryPart then
        return
    end

    local size = CalculateHealthBarSize(humanoid)
    local cf = box.PrimaryPart.CFrame

    -- Calculate health bar position relative to humanoid
    local barPos = cf * ESP.BoxShift * CFrame.new(0, ESP.BoxSize.Y / 2, 0)

    -- Update the Quad (health bar) position and size
    local barTop, barVisible = WorldToViewportPoint(cam, barPos.p)

    if box.Components.HealthBar then
        if barVisible and ESP.HealthBars then
            box.Components.HealthBar.Visible = true
            box.Components.HealthBar.Size = size
            box.Components.HealthBar.Position = Vector2.new(barTop.X, barTop.Y)
        else
            box.Components.HealthBar.Visible = false
        end
    end
end

-- New: Modify the boxBase:Update() function to include health bar update
function boxBase:Update()
    if not self.PrimaryPart then
        return self:Remove()
    end

    -- Existing update logic...

    local humanoid = self.Object:FindFirstChildOfClass("Humanoid")
    if humanoid and ESP.HealthBars then
        UpdateHealthBar(self, humanoid)
    end
end

-- New: Modify the ESP:Add() function to include health bar drawing
function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then
        return warn(obj, "has no parent")
    end

    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        Player = options.Player or plrs:GetPlayerFromCharacter(obj),
        PrimaryPart = options.PrimaryPart or obj.ClassName == "Model" and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")) or obj:IsA("BasePart") and obj,
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    if self:GetBox(obj) then
        self:GetBox(obj):Remove()
    end

    -- Draw health bar (Quad)
    box.Components["HealthBar"] = Draw("Quad", {
        Thickness = 0,
        Color = Color3.fromRGB(0, 255, 0),  -- Health bar color
        Transparency = 0.3,  -- Adjust transparency as needed
        Filled = true,
        Visible = self.Enabled and self.HealthBars
    })

    -- Other components (Name, Distance, Tracer)
    -- Ensure these are already defined as in your original code

    self.Objects[obj] = box

    -- Handle object removal events
    obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil and ESP.AutoRemove ~= false then
            box:Remove()
        end
    end)
    obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if obj.Parent == nil and ESP.AutoRemove ~= false then
            box:Remove()
        end
    end)

    -- Handle humanoid death event
    local hum = obj:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.Died:Connect(function()
            if ESP.AutoRemove ~= false then
                box:Remove()
            end
        end)
    end

    return box
end

-- Modify CharAdded function to include health bar addition
local function CharAdded(char)
    local p = plrs:GetPlayerFromCharacter(char)
    if not char:FindFirstChild("HumanoidRootPart") then
        local ev
        ev = char.ChildAdded:Connect(function(c)
            if c.Name == "HumanoidRootPart" then
                ev:Disconnect()
                ESP:Add(char, {
                    Name = p.Name,
                    Player = p,
                    PrimaryPart = c
                })
            end
        end)
    else
        ESP:Add(char, {
            Name = p.Name,
            Player = p,
            PrimaryPart = char.HumanoidRootPart
        })
    end
end

-- Existing PlayerAdded function...

-- Add RenderStepped event to update ESP visuals
game:GetService("RunService").RenderStepped:Connect(function()
    cam = workspace.CurrentCamera
    for i,v in (ESP.Enabled and pairs or ipairs)(ESP.Objects) do
        if v.Update then
            local s,e = pcall(v.Update, v)
            if not s then warn("[EU]", e, v.Object:GetFullName()) end
        end
    end
end)

return ESP
